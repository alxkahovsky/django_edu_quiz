Задание 1
Нужно сделать простой сервис проведения тестирования по каким-либо темам. Т.е. есть
тесты с вариантами ответов, один или несколько вариантов должны быть правильными.
Тесты группируются в наборы тестов, которые затем пользователь может проходить и
видеть свой результат.

Функциональные части сервиса + чеклист:
• Регистрация пользователей [+]
• Аутентификация пользователей [+]
• Зарегистрированные пользователи могут проходить любой из тестовых наборов [+] Собираем наборы через Django MPTT
• Последовательный ответ на все вопросы, каждый вопрос должен выводится на новой
странице с отправкой формы (перескакивать через тесты или оставлять неотмеченными
нельзя) [+] Результаты теста, Результаты прохождения тестов храним в сессиях
• После завершения тестирования смотреть результат:
• количество правильных/неправильных ответов [+]
• процент правильных ответов [+]
• Админка. Стандартная админка Django. Разделы:
• Стандартный раздел пользователей [+]
• Раздел с наборами тестов [+]
• Возможность на странице набора тестов добавлять вопросы/ответы к вопросам/отмечать
правильные ответы [+] Модель вопроса педполагает 4 варианта ответа;
• Валидация на то, что должен быть хотябы 1 правильный вариант [+]
• Валидация на то, что все варианты не могут быть правильными [+]
• Удаление вопросов/вариантов ответов/изменение правильных решений при
редактировании тестового набора [+]
Требования
• Код в репозитории на GitHub.
• Список всех зависимостей должен храниться в requirements.txt, соответственно можно
установить их командой pip install -r requirements.txt.
• Разработка должны вестись в virtualenv, но сама директория с virtualenv должна быть
добавлена в .gitignore.
• Настройки должны храниться в settings.py, но также, при наличии settings_local.py в той же
директории, настройки из settings_local.py должны переопределять настройки в settings.py.
Т.е. если есть файл settings_local.py, то определенные в нем параметры имеют больший
приоритет. Сам файл settings_local.py добавляется в .gitignore. Таким образом у каждого
девелопера и на бета сервере можно использовать кастомные настройки, например для
соединения с БД.
• Должен работать один из способов создания структуры БД. Встроенный manage.py
syncdb или миграции через South (будет плюсом).
• По фронт-енду требований никаких не предъявляется. Можно использовать любимый
фреймворк или, например, воспользоваться Bootstrap.


Инструкция по запуску:

1.Клонируем текущий репозиторий;
2.Создаем виртуальное окружение (python 3.10) и активируем и устанавливаем зависимости;
3.Создаем файл настроек settings_local.py вручную или при помощи команды "python manage.py createlocaldb";
4.Репозиторий содержит файлы миграций, требования к миграциям, указанные в ТЗ, явно устарели, поэтому делаем "python manage.py makemigrations", далее "python manage.py migrate". Убедитесь что все миграции установлены "python manage.py showmigrations";
6.Создайте учетную запись администратора "python manage.py createsuperuser";
7.Запустите сервер разработки "python manage.py runserver";

пример файла settings_local.py:

from pathlib import Path


DEBUG = True
ALLOWED_HOSTS = ['*']
BASE_DIR = Path(__file__).resolve().parent.parent


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'your_db_name.sqlite3',
    }
}
